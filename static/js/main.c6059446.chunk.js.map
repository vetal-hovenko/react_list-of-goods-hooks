{"version":3,"sources":["types.ts","App.tsx","index.tsx"],"names":["SortType","goodsFromServer","LIGHT_COLOR_STYLE","App","useState","sortField","setSortField","sortOrder","setSortOrder","goodsForSort","goods","sortBy","order","newGoods","sort","good1","good2","byLength","length","byName","localeCompare","reset","reverse","preparedGoods","resetGoods","Reset","type","onClick","className","sortingButtonClass","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAEYA,E,6DAAAA,K,kBAAAA,E,cAAAA,E,kBAAAA,E,eAAAA,M,gBCSCC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGIC,EAAoB,WA+BnB,IAAMC,EAAM,WACjB,MAAkCC,mBAAoB,IAAtD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAkCF,mBAAuB,IAAzD,mBAAOG,EAAP,KAAkBC,EAAlB,KACMC,EAhCR,SACEC,EADF,GAGG,IADCC,EACF,EADEA,OAAQC,EACV,EADUA,MAEJC,EAAQ,YAAOH,GAkBrB,OAhBIC,GACFE,EAASC,MAAK,SAACC,EAAOC,GACpB,OAAQL,GACN,KAAKX,EAASiB,SACZ,OAAOF,EAAMG,OAASF,EAAME,OAE9B,KAAKlB,EAASmB,OACZ,OAAOJ,EAAMK,cAAcJ,GAE7B,KAAKhB,EAASqB,MACd,QACE,OAAO,MAKXT,IAAUZ,EAASsB,QACdT,EAASS,UAGXT,EAMcU,CAActB,EAAiB,CAClDU,OAAQN,EAAWO,MAAOL,IAWtBiB,EAAa,WACjBlB,EAAaN,EAASqB,OACtBf,EAAa,IACbE,EAAa,KAGTiB,EAAQ,kBACZ,wBACEC,KAAK,SACLC,QAASH,EACTI,UAAU,4BAHZ,oBASIC,EAAqB,SAAClB,GAC1B,OAAIN,IAAcM,EACT,GAGFT,GAGT,OACE,sBAAK0B,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEF,KAAK,SACLC,QAAS,kBAAMrB,EAAaN,EAASmB,SACrCS,UAAS,yBAAoBC,EAAmB7B,EAASmB,SAH3D,iCAQA,wBACEO,KAAK,SACLC,QAAS,kBAAMrB,EAAaN,EAASiB,WACrCW,UAAS,4BAAuBC,EAAmB7B,EAASiB,WAH9D,4BAQA,wBACES,KAAK,SACLC,QArDa,WACfpB,IAAcP,EAASsB,QACzBd,EAAa,IAEbA,EAAaR,EAASsB,UAkDlBM,UAAS,4BAAuBrB,IAAcP,EAASsB,QAAU,GAAKpB,GAHxE,sBAQEG,GAAaE,IAAc,cAACkB,EAAD,OAG/B,6BACGhB,EAAaqB,KAAI,SAAAC,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,YC3HlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.c6059446.chunk.js","sourcesContent":["export type Good = string;\n\nexport enum SortType {\n  byLength = 'length',\n  byName = 'name',\n  reverse = 'reverse',\n  reset = 'reset',\n}\n\nexport type SortParam = SortType.byLength\n| SortType.byName\n| SortType.reset\n| '';\n\nexport type ReverseParam = SortType.reverse | '';\n\nexport type SortingParams = {\n  sortBy: SortParam;\n  order?: ReverseParam;\n};\n","import 'bulma/css/bulma.css';\nimport './App.scss';\nimport { useState } from 'react';\nimport {\n  Good,\n  ReverseParam,\n  SortParam,\n  SortType,\n  SortingParams,\n} from './types';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst LIGHT_COLOR_STYLE = 'is-light';\n\nfunction preparedGoods(\n  goods: Good[],\n  { sortBy, order } : SortingParams,\n) {\n  const newGoods = [...goods];\n\n  if (sortBy) {\n    newGoods.sort((good1, good2) => {\n      switch (sortBy) {\n        case SortType.byLength:\n          return good1.length - good2.length;\n\n        case SortType.byName:\n          return good1.localeCompare(good2);\n\n        case SortType.reset:\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (order === SortType.reverse) {\n    return newGoods.reverse();\n  }\n\n  return newGoods;\n}\n\nexport const App = () => {\n  const [sortField, setSortField] = useState<SortParam>('');\n  const [sortOrder, setSortOrder] = useState<ReverseParam>('');\n  const goodsForSort = preparedGoods(goodsFromServer, {\n    sortBy: sortField, order: sortOrder,\n  });\n\n  const reverseGoods = () => {\n    if (sortOrder === SortType.reverse) {\n      setSortOrder('');\n    } else {\n      setSortOrder(SortType.reverse);\n    }\n  };\n\n  const resetGoods = () => {\n    setSortField(SortType.reset);\n    setSortField('');\n    setSortOrder('');\n  };\n\n  const Reset = () => (\n    <button\n      type=\"button\"\n      onClick={resetGoods}\n      className=\"button is-danger is-light\"\n    >\n      Reset\n    </button>\n  );\n\n  const sortingButtonClass = (sortBy: string) => {\n    if (sortField === sortBy) {\n      return '';\n    }\n\n    return LIGHT_COLOR_STYLE;\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          onClick={() => setSortField(SortType.byName)}\n          className={`button is-info ${sortingButtonClass(SortType.byName)}`}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={() => setSortField(SortType.byLength)}\n          className={`button is-success ${sortingButtonClass(SortType.byLength)}`}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={reverseGoods}\n          className={`button is-warning ${sortOrder === SortType.reverse ? '' : LIGHT_COLOR_STYLE}`}\n        >\n          Reverse\n        </button>\n\n        {(sortField || sortOrder) && <Reset />}\n      </div>\n\n      <ul>\n        {goodsForSort.map(good => (\n          <li data-cy=\"Good\" key={good}>{good}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}